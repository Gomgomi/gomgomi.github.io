{"pages":[{"title":"","text":"🇰🇷 대한민국에서 약 6년간 소프트웨어 개발을 하고있습니다. 🧑🏻‍💻 주로 사용하는 프로그래밍 언어는 C/C++ 입니다. 최근에는 트렌디한 웹 개발에 관심이 있어서 JavaScript/TypeScript를 사용한 프로젝트에도 참여하고있습니다. 간단한 툴이 필요한 경우 Python으로 작성하는 취미가 있습니다. 🏃🏻🎹 개발외 시간에는 건강을 위해 운동을 하거나,갬성충전을 위해 피아노를 배우고있습니다. 🏆 제 목표는 스택오버플로우 도움없이 언제 어디서든 노트북과 인터넷만 있다면, 무엇이든 개발 할 수 있는 프로그래머가 되는 것입니다. (인터넷은 git push 용도입니다. 코드는 소중하자나요.😁)","link":"/about/index.html"}],"posts":[{"title":"2020 계획","text":"Photo by Glenn Carstens-Peters on Unsplash 연 계획을 올해 반이 지난 시점에 작성하는게 의아하지만, 블로그를 제대로 시작하려고 마음 먹었기에 목표부터 세우고 하는게 맞는 것 같아 첫 포스트를 올해 계획으로 써본다.그리고 연말에 내가 세운목표를 얼마나 달성했는지 회고도 해보고, 내년 계획을 좀 더 잘 잡을 수 있을 것 같다. ✏️ 블로그 작성 일단 꾸준히 작성 생각만하고 실행하지 못했던 블로그 작성이 목표이다.주 몇 회를 정하면 좋겠지만 아직 무엇을 적을지 모르겠고 얼마나 시간을 투자해야되는지 감이 안온다.우선, 에버노트에 이것저것 적어놓은 것도 정리해보고 블로그에 올릴만 한 것들을 추려봐야겠다.스터디도 시작했으니 스터디하면서 공부하거나, 큰 이슈에 대한 해결방법 같은 것도 적으면 좋을 것 같다.뭐든 꾸준히 적어보자. 🎮 Toy project 프론트엔드 1개 백엔드 1개 웹 개발 시작이 늦은 감이 있지만, 더 늦어지면 안될 것 같아 올해는 해보기로 마음 먹었다.각 프로젝트를 완성하고 웹에 대한 전반적인 이해를 하는게 목표이다. 회사에서도 웹 개발 팀으로 이동했으니 실제 업무와 맞물려하면 좀 더 빠르게 익힐 수 있지 않을까라는 생각이든다.나의 개발 스펙트럼을 넓혀보자. ⌨️ 코딩테스트 HackerRank 주 1문제 첫 회사 구직할 때만해도 코딩테스트가 흔치 않았는데, 지금은 많은 회사에서 채용에 사용되고있다.코딩테스트는 Hackerrank 같은 코딩테스트 플랫폼을 이용하거나 과제를 제출하는 곳도 있고, 원격이나 면접장에서 라이브 코딩을 하는 곳도 있다.이직을 위해서라기 보다는 나의 수준을 확인하고 개발 공부도 할 수 있는 좋은 방법이라고 생각했다. 문득 든 생각이었는데, 언젠가부터 계속 사용하는 기술이나 방법론만 사용하다보니 멍청해지는 것 같은 느낌이들었다. 분야가 분야인 만큼 꾸준히 자기개발을 해야하는데 나태해졌다.우선 알고리즘 문제를 중심으로 풀어가면서 머리를 말랑말랑하게 만들어보자. 🧑🏻‍🏫 컨퍼런스, 세미나 행사 최소 3번 참석 어떤 기술이 핫한지, 흐름이 어떤지 알 수 있는 가장 좋은 방법이라고 생각한다. 작년에는 한 번 밖에 참석 못했지만, 올해는 좀 더 참석 해보고싶다. 시국이 시국인지라 오프라인 행사대신 웨비나로 대체되고 있는 것 같다.라떼만 찾는 꼰대 개발자가 되지말자. 📚 책 읽기 매달 1권 개발 서적 4권 비개발 서적 5권 개발 서적은 전문성을 높이기 위해, 비개발 서적은 머리를 좀 쉬기위해 필요하다고 생각했다. 그리고 회사든 집이든 하루종일 모니터와 키보드를 만지는데 이런 식으로라도 잠시나마 저 친구들과 거리를 두는게 좋은것 같다.요즘 일요일 저녁마다 카페가서 책을 읽는데, 예쁘고 핫한 카페들도 일요일 저녁은 조용하고 사람도 별로 없어서 주말을 마무리 하기에 꽤 좋은 시간이다.책장을 채워보자.","link":"/2020/07/12/20200712-annual_plan/"},{"title":"Docker에 Swagger UI 서버 구성","text":"스터디로 진행 중인 프로젝트에서 REST API를 문서화하여 공유하기 위해 Swagger를 사용하기로 했다.전 회사에서 Swagger로 작성된 문서를 보기만 했었는데, 이번에 스터디 진행하면서 직접 사용해보고 서버에 올려 공유도 해보고싶었다. Docker에서 Swagger UI 이미지로 컨테이너 동작 확인Swagger UI 문서에 설치하는 방법이 몇 가지 있으며, 나는 docker를 통해 작성한 swagger 파일을 서버로 띄워보기로했다.docker로 띄우는 이유는 현재 프리티어로 사용중인 AWS EC2 인스턴스(이하 EC2)가 있고, 단순히 API 공유가 목적이므로 가장 시간이 적게 드는 방법이라고 생각했기 때문이다. 먼저 swagger-ui docker 이미지를 pull하고 정상적으로 실행되는지 확인한다. 12sudo docker pull swaggerapi/swagger-uisudo docker run -p 80:8080 swaggerapi/swagger-ui 컨테이너 실행되어 80번 포트(localhost:80)로 브라우저에서 접속하면, 아래 화면과 같은 디폴트로 설정되어있는 Swagger 문서인 Swagger Petstore 문서가 표시된다. Swagger 파일 작성docker에서 간단히 Swagger UI 동작을 확인 해봤으니, 이번에는 직접 작성한 Swagger 파일로 띄워보자. yaml이나 json으로 작성한 swagger 파일을 준비한다. swagger 파일을 작성할 때는 vscode extension이나 Swagger Editor를 사용하면 preview로 UI를 확인하면서 작성가능하고 오류도 확인할 수 있다.나는 Swagger Editor를 사용하여 좀 더 익숙한 json 포맷으로 작성했다. 파일을 EC2에 업로드로컬에서 docker를 사용했으면 필요없는 과정이지만, EC2로 Swagger UI를 띄워 놓을 것이므로 EC2에 파일을 업로드해준다. 파일을 업로드할 때는 scp 툴을 사용하여 아래 명령어로 업로드한다. 1scp -i &lt;*.pem file&gt; &lt;source file&gt; &lt;ec2 username&gt;@&lt;ec2 instance public DNS&gt;:&lt;target path&gt; 예를 들어 docker의 ~/swagger 경로에 작성한 my-swagger.json을 업로드하는 경우 아래와 같은 명령어가 된다. 1scp -i key.pem my-swagger.json user1@ec2-xxx-xxx-xxx-xxx.us-east-2.compute.amazonaws.com:~/swagger 작성한 Swagger 파일로 Swagger UI 실행이제 작성한 Swagger 파일을 Swagger UI로 띄워보자. 1sudo docker run -p 52000:8080 -e SWAGGER_JSON=/swagger/my-swagger.json -v &quot;$(pwd)/swagger:/usr/src/app/swagger swaggerapi/swagger-ui -p 옵션은 포트를 지정해주는 옵션이며 &lt;외부 접속 포트&gt;:&lt;내부 연결 포트&gt;로 생각하면 된다.위 명령에서는 Swagger UI 외부 접속 포트를 52000으로 지정하였다. -v 옵션은 작성한 Swagger 파일이 있는 폴더를 docker 컨테이너에 마운트하여 파일을 읽을 수 있도록 한다.위 명령에서는 작성한 Swagger 파일이 위치하는 $(pwd)/swagger 폴더를 컨테이너의 /usr/src/app/swagger 폴더로 마운트하였다. -e 옵션은 환경변수를 지정해주는 옵션으로, 작성한 Swagger 파일 경로를 SWAGGER_JSON 변수 값으로 지정해주어 Swagger UI에 표시될 문서를 지정한다. 인바운드 규칙 설정외부에서 Swagger UI 접속 포트(여기서는 52000)로 사용하는 포트를 인바운드 규칙에 추가하여 정상 접근할 수 있도록 설정한다. 여기서는 EC2를 사용하므로 AWS EC2의 보안그룹 설정 페이지에서 인바운드 규칙으로 52000번 포트를 추가한다. 나는 52000 ~ 52099 포트는 혹시 다른 서비스를 띄울때를 대비하여 swagger 용 포트로 잡아두었다.(그런데 아마 안 쓸 확률이 높은듯..😏) Swagger UI 접속컨테이너를 실행하고 인바운드 규칙 설정이 완료되면 52000 포트로 접속하여 작성한 Swagger 문서가 Swagger UI로 표시된다. 해야할 것들 작성하는 swagger 파일을 github 저장소에 추가하여 관리하고 변경되면 자동으로 EC2에서 업데이트 하도록 시스템 구성. 참고자료 https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/installation.md - Swagger UI https://ict-nroo.tistory.com/40 - scp 사용법","link":"/2020/08/24/20200824-swaggerui_on_docker/"}],"tags":[{"name":"plan","slug":"plan","link":"/tags/plan/"},{"name":"swagger","slug":"swagger","link":"/tags/swagger/"},{"name":"swagger-ui","slug":"swagger-ui","link":"/tags/swagger-ui/"},{"name":"docker","slug":"docker","link":"/tags/docker/"},{"name":"web","slug":"web","link":"/tags/web/"}],"categories":[{"name":"Gomgomi","slug":"Gomgomi","link":"/categories/Gomgomi/"},{"name":"Develop","slug":"Develop","link":"/categories/Develop/"},{"name":"Web","slug":"Develop/Web","link":"/categories/Develop/Web/"}]}